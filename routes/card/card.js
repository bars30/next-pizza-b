const express = require('express');
const { client } = require('../../db');
 const crypto = require('crypto');
const router = express.Router();



router.get('/', async (req, res) => {
 try {
     const token = req.cookies.cartToken;
     console.log('Cart Token:', token);

     if (!token) {
         return res.status(400).json({ message: 'No cart token provided' });
     }

     const cartQuery = `
         SELECT * FROM "Cart"
         WHERE "token" = $1
         LIMIT 1;
     `;
     const cartResult = await client.query(cartQuery, [token]);

     if (cartResult.rows.length === 0) {
         return res.status(404).json({ message: 'Cart not found' });
     }

     const cart = cartResult.rows[0];
     const cartId = cart.id;
 
     // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
     const itemsQuery = `
         SELECT 
             ci.id AS "cartItemId",
             ci."cartId",
             ci."quantity",
             ci."createdAt",
             ci."updatedAt",
             pi.id AS "productItemId",
             pi.price,
             pi.size,
             pi."pizzaType",
             p.id AS "productId",
             p.name AS "productName",
             p."imageUrl" AS "productImageUrl",
             i.id AS "ingredientId",
             i.name AS "ingredientName",
             i."imageUrl" AS "ingredientImageUrl",
             i.price AS "ingredientPrice" -- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ —Ü–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
         FROM "CartItem" ci
         JOIN "ProductItem" pi ON ci."productItemId" = pi.id
         JOIN "Product" p ON pi."productId" = p.id
         LEFT JOIN "Ingredient" i ON i.id = ANY(ci."ingredients")
         WHERE ci."cartId" = $1
         ORDER BY ci."createdAt" DESC;
     `;
     const itemsResult = await client.query(itemsQuery, [cartId]);

     // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
     const itemsMap = {};
     itemsResult.rows.forEach(row => {
         const {
             cartItemId,
             productItemId,
             productId,
             productName,
             productImageUrl,
             price,
             size,
             pizzaType,
             ingredientId,
             ingredientName,
             ingredientImageUrl,
             ingredientPrice, // –¶–µ–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
             ...cartItemData
         } = row;

         if (!itemsMap[cartItemId]) {
             itemsMap[cartItemId] = {
                 id: cartItemId,
                 cartId: cartItemData.cartId,
                 quantity: cartItemData.quantity,
                 createdAt: cartItemData.createdAt,
                 updatedAt: cartItemData.updatedAt,
                 productItem: {
                     id: productItemId,
                     price,
                     size,
                     pizzaType,
                     product: {
                         id: productId,
                         name: productName,
                         imageUrl: productImageUrl,
                     },
                 },
                 ingredients: [],
             };
         }

         if (ingredientId) {
             itemsMap[cartItemId].ingredients.push({
                 id: ingredientId,
                 name: ingredientName,
                 imageUrl: ingredientImageUrl,
                 price: ingredientPrice, // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ —Ü–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
             });
         }
     });

     const items = Object.values(itemsMap);
     console.log('SQL Result Rows:', itemsResult.rows); // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞
     console.log('Items Map:', itemsMap); // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É itemsMap –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ –º–∞—Å—Å–∏–≤
     
     return res.status(200).json({
         ...cart,
         items,
     });
 } catch (error) {
     console.error('[CART_GET] Server error', error);
     return res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É' });
 } 
});

router.post('/change-quantity', async (req, res) => {
    try {
        const { id, quantity } = req.body;
        console.log(req.body);
        
        const token = req.cookies.cartToken;
        console.log('Cart Token:', token);
   
        if (!token) {
            // return res.status(400).json({ message: 'No cart token provided' });
    }

    if (!id || !quantity) {
        return res.status(400).json({ message: 'Invalid input: id and quantity are required' });
    }

    const query = `
        UPDATE "CartItem"
        SET "quantity" = $1, "updatedAt" = NOW()
        WHERE "id" = $2
        RETURNING *;
    `;

    const values = [quantity, id];
    
    const result = await client.query(query, values); // Assuming `db.query` is your database query method
    
    
    if (result.rowCount === 0) {
        return res.status(404).json({ message: 'CartItem not found' });
    }

    console.log('Updated CartItem:', result.rows[0]);
    return res.status(200).json({ message: 'Quantity updated successfully', cartItem: result.rows[0] });
    }catch (error) {
        console.error('[CART_GET] Server error', error);
        return res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É' });
    }
})

router.post('/delete-cart-item', async (req, res) => {
    try {
        const { id } = req.body;
        console.log(req.body);
        
        const token = req.cookies.cartToken;
        console.log('Cart Token:', token);
   
        if (!token) {
            // return res.status(400).json({ message: 'No cart token provided' });
    }

    if (!id) {
        return res.status(400).json({ message: 'Invalid input: id and quantity are required' });
    }

    const query = `
        DELETE FROM "CartItem"
        WHERE id = $1;  
    `;

    const values = [id];
    
    const result = await client.query(query, values); // Assuming `db.query` is your database query method
    

    console.log('Deleted CartItem:', result.rows[0]);
    return res.status(200).json({ message: 'Item deleted successfully', cartItem: result.rows[0] });
    }catch (error) {
        console.error('[CART_GET] Server error', error);
        return res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å delete ' });
    }
})



// Adding the item to card
// router.post('/add-to-cart', async (req, res) => {
//     try {
//         const {selectedSize, selectedType, ingredients, quantity} = req.body;
//         console.log('üçíselectedSize -->',selectedSize);
//         console.log('üçíselectedType -->',selectedType);
//         console.log('üçíingredients -->',ingredients);
//         console.log('üçíquantity -->',quantity);
        
//         let token = req.cookies.cartToken;
//         console.log('Cart Token:', token);

//         if (!token) { 
//             console.log('No cart token provided');
//             token = crypto.randomUUID();  // Generate a new token if not provided
//         }
//         console.log('Generated Token:', token);

//         // Check if the token exists in the Cart table
//         const selectQuery = `
//             SELECT * FROM "Cart" WHERE "token" = $1;
//         `;
//         const values = [token];
//         const result = await client.query(selectQuery, values);

//         console.log('Query Result:', result.rows);

//         if (result.rowCount === 0) {
//             // If no rows are found, insert a new row into the Cart table
//             const insertQuery = `
//                 INSERT INTO "Cart" ("token", "createdAt", "updatedAt")
//                 VALUES ($1, NOW(), NOW())
//                 RETURNING *;
//             `;
//             const insertResult = await client.query(insertQuery, values);

//             console.log('New Cart Created:', insertResult.rows[0]);
//             return res.status(201).json(insertResult.rows[0]);
//         }

//         // If a cart with the token exists, return it
//         res.status(200).json(result.rows[0].id);
//         const cartId = result.rows[0].id;

//     } catch (error) {
//         console.error('[CART_POST] Server error', error);
//         return res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É' });
//     }
// });

// router.post('/add-to-cart', async (req, res) => {
//     try {
//         const {productItemId, ingredients, quantity} = req.body;
//         console.log('üçíproductItemId -->', productItemId);
//         console.log('üçíingredients -->', ingredients);
//         console.log('üçíquantity -->', quantity);
        
//         let token = req.cookies.cartToken;
//         console.log('Cart Token:', token);

//         if (!token) { 
//             console.log('No cart token provided');
//             token = crypto.randomUUID();  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω

//             // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
//     res.cookie('cartToken', token, { httpOnly: true, maxAge: 30 * 24 * 60 * 60 * 1000 }); // –∫—É–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 30 –¥–Ω–µ–π
//     console.log('Generated and set new token in cookies:', token);
//         }
//         console.log('Generated Token:', token);

//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Cart
//         const selectQuery = `
//             SELECT * FROM "Cart" WHERE "token" = $1;
//         `;
//         const values = [token];
//         const result = await client.query(selectQuery, values);

//         console.log('Query Result:', result.rows);

//         if (result.rowCount === 0) {
//             // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω—ã —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
//             const insertQuery = `
//                 INSERT INTO "Cart" ("token", "createdAt", "updatedAt")
//                 VALUES ($1, NOW(), NOW())
//                 RETURNING *;
//             `;
//             const insertResult = await client.query(insertQuery, values);

//             console.log('New Cart Created:', insertResult.rows[0]);
//             return res.status(201).json(insertResult.rows[0]);
//         }

//         // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º cartId
//         const cartId = result.rows[0].id;
//         let checkItemQuery = ``;
//         let checkItemValues = [];
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–ª–µ–º–µ–Ω—Ç –≤ CartItem —Å —Ç–∞–∫–∏–º cartId, productItemId –∏ ingredients
//         if (ingredients == []) {
//             checkItemQuery = `
//             SELECT * FROM "CartItem" 
//             WHERE "cartId" = $1 
//             AND "productItemId" = $2 
//             `;
//             checkItemValues = [cartId, productItemId];
//         } else {
//             checkItemQuery = `
//                 SELECT * FROM "CartItem" 
//                 WHERE "cartId" = $1 
//                 AND "productItemId" = $2 
//                 AND "ingredients" = $3;
//             `;
//             checkItemValues = [cartId, productItemId, ingredients];
//         }
//         // const checkItemValues = [cartId, productItemId, ingredients];
//         const itemResult = await client.query(checkItemQuery, checkItemValues);
//         console.log(itemResult.rowCount, 'üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏üõ∏')
//         console.log(checkItemValues, 'üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üçíüçíüçíüçí')
//         if (itemResult.rowCount > 0) {
//             // –ï—Å–ª–∏ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º quantity
//             const itemId = itemResult.rows[0].id;
//             const oldQuantity = itemResult.rows[0].quantity;
//             console.log('oldQUANTITY', oldQuantity);
            
//             const newQuantity = quantity !== 1 ? quantity : oldQuantity + 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

//             const updateQuery = `
//                 UPDATE "CartItem" 
//                 SET "quantity" = $1, "updatedAt" = NOW() 
//                 WHERE "id" = $2
//                 RETURNING *;
//             `;
//             const updateValues = [newQuantity, itemId];
//             const updateResult = await client.query(updateQuery, updateValues);

//             console.log('Updated CartItem:', updateResult.rows[0]);
//             return res.status(200).json(updateResult.rows[0]);
//         } else {
//             // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
//             const insertItemQuery = `
//                 INSERT INTO "CartItem" ("cartId", "productItemId", "ingredients", "quantity", "createdAt", "updatedAt")
//                 VALUES ($1, $2, $3, $4, NOW(), NOW())
//                 RETURNING *;
//             `;
//             const insertItemValues = [cartId, productItemId, ingredients, quantity];
//             const insertItemResult = await client.query(insertItemQuery, insertItemValues);

//             console.log('New CartItem Created:', insertItemResult.rows[0]);
//             return res.status(201).json(insertItemResult.rows[0]);
//         }

//     } catch (error) {
//         console.error('[CART_POST] Server error', error);
//         return res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É' });
//     }
// });

// const crypto = require('crypto');

router.post('/add-to-cart', async (req, res) => {
    try {
        const { productItemId, ingredients, quantity } = req.body;
        console.log('üçí productItemId -->', productItemId);
        console.log('üçí ingredients -->', ingredients);
        console.log('üçí quantity -->', quantity);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
        let token = req.cookies.cartToken;
        console.log('Cart Token:', token);

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        if (!token) {
            console.log('No cart token provided');
            token = crypto.randomUUID(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            res.cookie('cartToken', token, { httpOnly: true, maxAge: 30 * 24 * 60 * 60 * 1000 }); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π
            console.log('Generated and set new token in cookies:', token);
        }

        // –ü–æ–ª—É—á–∞–µ–º userId, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∞—á–µ null
        const userId = req.user?.id || null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
        const selectQuery = `
            SELECT * FROM "Cart" WHERE "token" = $1;
        `;
        const values = [token];
        const result = await client.query(selectQuery, values);

        console.log('Query Result:', result.rows);

        let cartId;

        if (result.rowCount === 0) {
            // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω—ã —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            const insertQuery = `
                INSERT INTO "Cart" ("token", "userId", "createdAt", "updatedAt")
                VALUES ($1, $2, NOW(), NOW())
                RETURNING *;
            `;
            const insertValues = [token, userId];
            const insertResult = await client.query(insertQuery, insertValues);

            console.log('New Cart Created:', insertResult.rows[0]);
            cartId = insertResult.rows[0].id;
        } else {
            // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ—ë id
            cartId = result.rows[0].id;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–ª–µ–º–µ–Ω—Ç –≤ CartItem —Å —Ç–∞–∫–∏–º cartId, productItemId –∏ ingredients
        let checkItemQuery;
        let checkItemValues;

        if (!ingredients || ingredients.length === 0) {
            checkItemQuery = `
                SELECT * FROM "CartItem" 
                WHERE "cartId" = $1 
                AND "productItemId" = $2;
            `;
            checkItemValues = [cartId, productItemId];
        } else {
            checkItemQuery = `
                SELECT * FROM "CartItem" 
                WHERE "cartId" = $1 
                AND "productItemId" = $2 
                AND "ingredients" = $3;
            `;
            checkItemValues = [cartId, productItemId, ingredients];
        }

        const itemResult = await client.query(checkItemQuery, checkItemValues);
        console.log('Item Query Result:', itemResult.rows);

        if (itemResult.rowCount > 0) {
            // –ï—Å–ª–∏ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º quantity
            const itemId = itemResult.rows[0].id;
            const oldQuantity = itemResult.rows[0].quantity;
            const newQuantity = quantity !== 1 ? quantity : oldQuantity + 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

            const updateQuery = `
                UPDATE "CartItem" 
                SET "quantity" = $1, "updatedAt" = NOW() 
                WHERE "id" = $2
                RETURNING *;
            `;
            const updateValues = [newQuantity, itemId];
            const updateResult = await client.query(updateQuery, updateValues);

            console.log('Updated CartItem:', updateResult.rows[0]);
            return res.status(200).json(updateResult.rows[0]);
        } else {
            // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            const insertItemQuery = `
                INSERT INTO "CartItem" ("cartId", "productItemId", "ingredients", "quantity", "createdAt", "updatedAt")
                VALUES ($1, $2, $3, $4, NOW(), NOW())
                RETURNING *;
            `;
            const insertItemValues = [cartId, productItemId, ingredients, quantity];
            const insertItemResult = await client.query(insertItemQuery, insertItemValues);

            console.log('New CartItem Created:', insertItemResult.rows[0]);
            return res.status(201).json(insertItemResult.rows[0]);
        }
    } catch (error) {
        console.error('[CART_POST] Server error', error);
        return res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É' });
    }
});


module.exports = router;